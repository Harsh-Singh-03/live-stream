// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model User
model User {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  email                  String   @unique
  username               String   @unique
  name                   String
  password               String
  image                  String?
  bio                    String?
  provider               String?
  isEmailVerified        Boolean  @default(false)
  emailVerificationToken String?
  resetPasswordToken     String?

  following              Follow[] @relation("Following")
  followedBy             Follow[] @relation("FollowedBy")

  blocking               Block[]  @relation("Blocking")
  blockedBy              Block[]  @relation("BlockedBy")

  Stream                 Stream?

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// Stream Modal
model Stream {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  thumbnailUrl        String?

  ingressId           String  @unique
  serverUrl           String?
  streamKey           String?

  isLive              Boolean  @default(false)
  isChatEnabled       Boolean  @default(true)
  isChatDelayed       Boolean  @default(false)
  isChatFollowersOnly Boolean  @default(false)

  userId              String   @db.ObjectId 
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([userId])
  @@fulltext([name])
}

// Model follow
model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId

  follower    User     @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Model Block
model Block {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blockerId String @db.ObjectId
  blockedId String @db.ObjectId

  blocker   User   @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
